<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>GET</http_method>
        <name>getReport</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var renew_date_start = request.queryParams.renew_date_start;
	var renew_date_end = request.queryParams.renew_date_end;
	var employee_name = request.queryParams.employee_name;
	var manager_id = request.queryParams.manager_id;
	var manager_name = request.queryParams.manager_name;
	var organization = request.queryParams.organization;
	var funded_by = request.queryParams.funded_by;
	var employee_type = request.queryParams.employee_type;
	var certificate_type = request.queryParams.certificate_type;
	var stage = request.queryParams.stage;
	var active = request.queryParams.active;
	var task_items = [];
	
	var task_item = new GlideRecord('x_naci_gcp_gcp_task');
	if(renew_date_start != null && renew_date_start.length > 0){
		task_item.addQuery('certificate_renew_date', ">=", renew_date_start);
	}
	if(renew_date_end != null && renew_date_end.length > 0){
		task_item.addQuery('certificate_renew_date', "<=", renew_date_end);
	}
	
	if(manager_id != null && manager_id.length > 0){
		if(employee_name != null && employee_name.length > 0){
			task_item.addQuery('employee_name','CONTAINS', employee_name);
			task_item.addQuery('manager_id', manager_id);
		}
		else{
			var tmp = task_item.addQuery('employee_id', manager_id);
			tmp.addOrCondition('manager_id',manager_id);
		}
	}
	else{
		if(employee_name != null && employee_name.length > 0){
			task_item.addQuery('employee_name','CONTAINS', employee_name);
		}
		if(manager_name != null && manager_name.length > 0){
			task_item.addQuery('manager','CONTAINS', manager_name);
		}
	}
	
	if(organization != null && organization.length > 0){
		task_item.addQuery('organization','CONTAINS', organization);
	}
	if(funded_by != null && funded_by.length > 0){
		task_item.addQuery('research_funded_by', funded_by);
	}
	if(employee_type != null && employee_type.length > 0){
		task_item.addQuery('employee_type', employee_type);
	}	
	if(certificate_type != null && certificate_type.length > 0){
		task_item.addQuery('certificate_type', certificate_type);
	}	
	if(stage != null && stage.length > 0){
		task_item.addQuery('stage', stage);
	}
	if(active != null && active.length > 0){
		task_item.addQuery('active', active);
	}		
	task_item.orderByDesc('certificate_completion_date');
	task_item.query();
	while(task_item.next()){
		var item = {};
		item.sys_id = task_item.sys_id.toString();
		item.name = task_item.getDisplayValue('certificate_name');
		item.type = task_item.getDisplayValue('certificate_type');
		item.employee_id = task_item.getDisplayValue('employee_id');
		item.employee = task_item.getDisplayValue('employee_name');
		item.c_date = Date.parse(task_item.getDisplayValue('certificate_completion_date'));
		item.rr_date = Date.parse(task_item.getDisplayValue('certificate_renew_date'));
		item.manager = task_item.getDisplayValue('manager');
		item.doc = task_item.getDisplayValue('organization');
		item.status = task_item.getDisplayValue('stage');
		item.active = task_item.getDisplayValue('active');
		if(!item.active){
			item.status = "Archived";
		}
		var attachment =  new GlideRecord('sys_attachment');
		attachment.addQuery('table_sys_id',task_item.sys_id);
		attachment.query();
		attachment.next();
		item.attachment_id = attachment.sys_id.toString();	
		task_items.push(item);
	}
	return task_items;
})(request, response);]]></operation_script>
        <operation_uri>/api/x_naci_gcp/gcprestapi/getReport</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/getReport</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>zhoujim@nih.gov</sys_created_by>
        <sys_created_on>2018-08-15 14:25:09</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c676cbffdbfb5b40b86770c08c961927</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>getReport</sys_name>
        <sys_package display_value="gcp" source="x_naci_gcp">609215f9dbe35b00b86770c08c9619e2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="gcp">609215f9dbe35b00b86770c08c9619e2</sys_scope>
        <sys_update_name>sys_ws_operation_c676cbffdbfb5b40b86770c08c961927</sys_update_name>
        <sys_updated_by>zhoujim@nih.gov</sys_updated_by>
        <sys_updated_on>2018-11-26 19:28:33</sys_updated_on>
        <web_service_definition display_value="gcpRestAPI">b36bbd43dba3db0054d8ff621f961968</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
